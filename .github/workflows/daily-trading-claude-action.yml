name: Daily AI Trading (Claude Code Action)

on:
  # 미국 주식시장 거래시간 중 3회 실행 (월-금)
  schedule:
    - cron: '45 13 * * 1-5'  # 장 시작 직후 (동부시간 9:45 AM, 한국시간 22:45/23:45)
    - cron: '30 16 * * 1-5'  # 점심 시간 (동부시간 12:30 PM, 한국시간 01:30/02:30)
    - cron: '30 19 * * 1-5'  # 장 마감 30분 전 (동부시간 3:30 PM, 한국시간 04:30/05:30)

  # 수동 실행 가능
  workflow_dispatch:
    inputs:
      trading_date:
        description: 'Trading date (YYYY-MM-DD) - leave empty for today'
        required: false
        type: string
permissions:
  contents: write
jobs:
  trading:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Changed from 'read' to 'write' to allow git push
      pull-requests: read
      issues: read
      id-token: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Fetch latest stock data
        env:
          DATA_DIR: ./data
          DAYS_BACK: 30
        run: |
          python fetch_stock_data.py

      - name: Fetch market news
        env:
          JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
          TRADING_DATE: ${{ inputs.trading_date }}
          USE_ALPACA: 'true'
          SIMULATION_MODE: 'false'
        run: |
          python fetch_market_news.py

      - name: Prepare trading data
        env:
          TRADING_DATE: ${{ inputs.trading_date }}
          # Trading mode configuration
          SIMULATION_MODE: 'false'
          USE_ALPACA: 'true'
          CONFIRM_REAL_TRADING: 'true'
          # Alpaca API credentials (only used if USE_ALPACA=true)
          ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
          ALPACA_API_SECRET: ${{ secrets.ALPACA_API_SECRET }}
          ALPACA_PAPER: 'true'
        run: |
          python prepare_trading_data.py

      - name: Run Claude Code Action for trading decision
        uses: anthropics/claude-code-action@v1
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            You are an expert AI trader. Please perform the following task:

            1. Read the file 'trading_prompt.txt' which contains detailed trading instructions
            2. Read the file 'trading_data.json' which contains:
               - Current portfolio positions and cash
               - Market prices for all NASDAQ 100 stocks
               - Market news (general market, sector-specific, and individual stock news)
            3. (Optional) Review previous trading logs in 'data/agent_data/claude-trader/log/' folder to:
               - Understand your past trading decisions and their outcomes
               - Maintain consistency in your trading strategy
               - Learn from previous market conditions and reactions
            4. If you need additional information or clarity on any market news, company updates, or economic data:
               - Use WebFetch to search for and gather more detailed information
               - Verify ambiguous claims or get recent developments
               - Research specific company fundamentals or sector trends
            5. Analyze the market data and news to make informed trading decisions
            6. Write your trading decision to 'claude_decision.json' in the following JSON format:
               {
                 "analysis": "Your detailed market and news analysis with specific references",
                 "actions": [
                   {"action": "buy", "symbol": "AAPL", "amount": 10, "reason": "specific reasoning"},
                   {"action": "sell", "symbol": "MSFT", "amount": 5, "reason": "specific reasoning"}
                 ]
               }
            7. If no trades are needed, use: {"analysis": "reasoning for holding", "actions": []}
            8. After completing your trading decision, send a summary to Discord:
               - Read the environment variable DISCORD_WEBHOOK for the webhook URL
               - Create a Korean summary of your trading decision including:
                 * 📊 시장 분석 요약 (key points from your analysis)
                 * 💼 거래 결정 (list of buy/sell actions with reasons)
                 * 📈 포트폴리오 현황 (current portfolio state if available)
               - Use curl or Bash to send a POST request to the Discord webhook:
                 ```bash
                 curl -X POST "$DISCORD_WEBHOOK" \
                   -H "Content-Type: application/json" \
                   -d '{
                     "embeds": [{
                       "title": "🤖 AI 트레이딩 결과",
                       "description": "Your Korean summary here",
                       "color": 5814783,
                       "timestamp": "current ISO timestamp"
                     }]
                   }'
                 ```
               - IMPORTANT - Writing Style Guidelines:
                 * Use military-style formal Korean tone (격식체, 군대 말투)
                 * Add sound effects based on sentiment:
                   - Positive news/results: "기합!" (energetic affirmation)
                   - Negative news/results: "기열!" (concerned warning)
                   - Other sound effects to use naturally: "쌔애끼", "뽀르삐뽑...", "뽀뽀르삡...", "삡!", "악!"
                 * Use humorous, DC-inside (디시인사이드) style internet slang and meme culture
                 * Keep the tone light and entertaining while maintaining factual accuracy
                 * CRITICAL: Never distort or exaggerate facts - humor should come from style, not misinformation
                 * Example tone: "시장 분석 결과 보고드립니다! 기합! 오늘 테크 섹터가 뽀르삐뽑... 상승세를 보였습니다!"
               - If DISCORD_WEBHOOK is empty or not set, skip this step silently

            IMPORTANT: Base your decisions on the news content and fundamental analysis provided in the data files.

            Please complete this task now.
          claude_args: |
            --model claude-sonnet-4-5-20250929
            --max-turns 10
            --allowed-tools "Bash(git:*)" --allowed-tools "Bash(mkdir:*)" --allowed-tools "Bash(curl:*)" --allowed-tools "WebFetch" --allowed-tools "Write"


      - name: Execute trades
        env:
          DECISION_FILE: claude_decision.json
          TRADING_DATA_FILE: trading_data.json
          # Trading mode configuration
          SIMULATION_MODE: 'false'
          USE_ALPACA: 'true'
          CONFIRM_REAL_TRADING: 'true'
          # Alpaca API credentials (only used if USE_ALPACA=true)
          ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
          ALPACA_API_SECRET: ${{ secrets.ALPACA_API_SECRET }}
          ALPACA_PAPER: 'true'
        run: |
          python execute_trades.py

      - name: Commit and push results
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git remote set-url --push origin https://$PAT_TOKEN@github.com/ounols/claude-trading.git
          git add data/
          # 변경사항이 있을 때만 커밋
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🤖 Auto trading: $(date +'%Y-%m-%d')"
            git push
          fi

      - name: Upload trading logs and artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trading-logs-${{ github.run_number }}
          path: |
            data/agent_data/*/log/
            data/agent_data/*/position/
            trading_data.json
            trading_prompt.txt
            claude_decision.json
            market_news.json
          retention-days: 90

      - name: Clean up temporary files
        if: always()
        run: |
          rm -f trading_data.json trading_prompt.txt claude_decision.json market_news.json
