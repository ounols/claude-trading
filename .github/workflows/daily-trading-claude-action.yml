name: Daily AI Trading (Claude Code Action)

on:
  # ÎØ∏Íµ≠ Ï£ºÏãùÏãúÏû• Í±∞ÎûòÏãúÍ∞Ñ Ï§ë 3Ìöå Ïã§Ìñâ (Ïõî-Í∏à)
  schedule:
    - cron: '45 13 * * 1-5'  # Ïû• ÏãúÏûë ÏßÅÌõÑ (ÎèôÎ∂ÄÏãúÍ∞Ñ 9:45 AM, ÌïúÍµ≠ÏãúÍ∞Ñ 22:45/23:45)
    - cron: '30 16 * * 1-5'  # Ï†êÏã¨ ÏãúÍ∞Ñ (ÎèôÎ∂ÄÏãúÍ∞Ñ 12:30 PM, ÌïúÍµ≠ÏãúÍ∞Ñ 01:30/02:30)
    - cron: '30 19 * * 1-5'  # Ïû• ÎßàÍ∞ê 30Î∂Ñ Ï†Ñ (ÎèôÎ∂ÄÏãúÍ∞Ñ 3:30 PM, ÌïúÍµ≠ÏãúÍ∞Ñ 04:30/05:30)

  # ÏàòÎèô Ïã§Ìñâ Í∞ÄÎä•
  workflow_dispatch:
    inputs:
      trading_date:
        description: 'Trading date (YYYY-MM-DD) - leave empty for today'
        required: false
        type: string
permissions:
  contents: write
jobs:
  trading:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Changed from 'read' to 'write' to allow git push
      pull-requests: read
      issues: read
      id-token: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Fetch latest stock data
        env:
          DATA_DIR: ./data
          DAYS_BACK: 30
        run: |
          python fetch_stock_data.py

      - name: Fetch market news
        env:
          JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
          TRADING_DATE: ${{ inputs.trading_date }}
          USE_ALPACA: 'true'
          SIMULATION_MODE: 'false'
        run: |
          python fetch_market_news.py

      - name: Prepare trading data
        env:
          TRADING_DATE: ${{ inputs.trading_date }}
          # Trading mode configuration
          SIMULATION_MODE: 'false'
          USE_ALPACA: 'true'
          CONFIRM_REAL_TRADING: 'true'
          # Alpaca API credentials (only used if USE_ALPACA=true)
          ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
          ALPACA_API_SECRET: ${{ secrets.ALPACA_API_SECRET }}
          ALPACA_PAPER: 'true'
        run: |
          python prepare_trading_data.py

      - name: Run Claude Code Action for trading decision
        uses: anthropics/claude-code-action@v1
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            You are an expert AI trader focused on LONG-TERM VALUE INVESTING. Please perform the following task:

            **INVESTMENT PHILOSOPHY**:
            - This is a LONG-TERM investment strategy, not day trading
            - Focus on companies with strong fundamentals and sustainable competitive advantages
            - Make CAUTIOUS and WELL-RESEARCHED decisions - quality over quantity
            - Short-term market volatility should not trigger hasty reactions
            - Building wealth gradually through compound growth is the goal

            **YOUR TASK**:

            1. Read the file 'trading_prompt.txt' which contains detailed trading instructions
            2. Read the file 'trading_data.json' which contains:
               - Current portfolio positions and cash
               - Market prices for all NASDAQ 100 stocks
               - Market news (general market, sector-specific, and individual stock news)
               - NOTE: If the file is too large (>25000 tokens), use Bash tools to extract sections:
                 * Use `jq` to extract specific JSON paths
                 * Use `grep` with context lines (-A, -B) to find relevant sections
                 * Focus on portfolio, prices, and news summaries first
            3. (Optional) Review previous trading logs in 'data/agent_data/claude-trader/log/' folder to:
               - Understand your past trading decisions and their outcomes
               - Maintain consistency in your long-term trading strategy
               - Learn from previous market conditions and reactions
            4. **IMPORTANT - Additional Research** (HIGHLY ENCOURAGED):
               - If you need additional information or clarity on any market news, company updates, or economic data, USE WebFetch to search for more information
               - Verify ambiguous claims or get recent developments before making decisions
               - Research specific company fundamentals, earnings reports, or sector trends
               - Check for any breaking news that might not be in the provided data
               - Look up company valuations, P/E ratios, growth projections when considering trades
               - DO NOT hesitate to do extra research - cautious, well-informed decisions are paramount
            5. Analyze the market data and news to make informed LONG-TERM trading decisions
               - Consider: Is this a company I want to hold for months/years?
               - Ask: Does this align with long-term value creation?
               - Avoid: Panic selling on short-term dips or FOMO buying on hype
            6. Write your trading decision to 'claude_decision.json' in the following JSON format:
               {
                 "analysis": "Your detailed market and news analysis with specific references",
                 "actions": [
                   {"action": "buy", "symbol": "AAPL", "amount": 10, "reason": "specific reasoning"},
                   {"action": "sell", "symbol": "MSFT", "amount": 5, "reason": "specific reasoning"}
                 ]
               }
            7. If no trades are needed (which is often the case in long-term investing), use: {"analysis": "reasoning for holding", "actions": []}
            8. After completing your trading decision, send a summary to Discord:
               - Create a Korean summary of your trading decision including:
                 * üìä ÏãúÏû• Î∂ÑÏÑù ÏöîÏïΩ (key points from your analysis)
                 * üíº Í±∞Îûò Í≤∞Ï†ï (list of buy/sell actions with reasons)
                 * üìà Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÌòÑÌô© (current portfolio state if available)
               - IMPORTANT - Writing Style Guidelines:
                 * Use military-style formal Korean tone (Í≤©ÏãùÏ≤¥, Íµ∞ÎåÄ ÎßêÌà¨)
                 * Add sound effects based on sentiment:
                   - Positive news/results: "Í∏∞Ìï©!" (energetic affirmation)
                   - Negative news/results: "Í∏∞Ïó¥!" (concerned warning)
                   - Other sound effects to use naturally: "ÎΩÄÎ•¥ÏÇêÎΩë...", "ÎΩÄÎΩÄÎ•¥ÏÇ°...", "ÏÇ°!", "ÏïÖ!"
                 * Use humorous, DC-inside (ÎîîÏãúÏù∏ÏÇ¨Ïù¥Îìú) style internet slang and meme culture
                 * Keep the tone light and entertaining while maintaining factual accuracy
                 * CRITICAL: Never distort or exaggerate facts - humor should come from style, not misinformation
                 * Example tone: "ÏÇ°! ÏãúÏû• Î∂ÑÏÑù Í≤∞Í≥º Î≥¥Í≥†ÎìúÎ¶ΩÎãàÎã§! Ïò§Îäò ÌÖåÌÅ¨ ÏÑπÌÑ∞Í∞Ä ÎΩÄÎ•¥ÏÇêÎΩë... ÏÉÅÏäπÏÑ∏Î•º Î≥¥ÏòÄÏäµÎãàÎã§! Í∏∞Ìï©!"
               - Send the message using this simple command (message should be under 2000 characters):
                 ```bash
                 curl -X POST "${{ secrets.DISCORD_WEBHOOK }}" -H "Content-Type: application/json" -d '{"embeds":[{"title":"ü§ñ AI Ìä∏Î†àÏù¥Îî© Í≤∞Í≥º","description":"Your Korean summary with \\n for newlines","color":5814783,"footer":{"text":"ü§ñ Generated with Claude Code"}}]}'
                 ```
               - Replace "Your Korean summary with \\n for newlines" with your actual message
               - Make sure to escape special characters properly in the JSON

            **CRITICAL REMINDERS**:
            - Base decisions on thorough fundamental analysis and news research
            - Use WebFetch liberally to gather additional information before making decisions
            - Long-term investment mindset: hold quality companies through volatility
            - It's perfectly fine (and often wise) to make NO trades if conditions aren't right
            - Quality of decisions > Quantity of trades

            Please complete this task now.
          claude_args: |
            --model claude-sonnet-4-5-20250929
            --max-turns 30
            --allowed-tools "Bash(git:*)" --allowed-tools "Bash(mkdir:*)" --allowed-tools "Bash(curl:*)" --allowed-tools "Bash(echo:*)" --allowed-tools "Bash(date:*)" --allowed-tools "Bash(grep:*)" --allowed-tools "Bash(head:*)" --allowed-tools "Bash(tail:*)" --allowed-tools "Bash(cat:*)" --allowed-tools "Bash(jq:*)" --allowed-tools "WebFetch" --allowed-tools "Write" --allowed-tools "Read" --allowed-tools "Grep"


      - name: Execute trades
        env:
          DECISION_FILE: claude_decision.json
          TRADING_DATA_FILE: trading_data.json
          # Trading mode configuration
          SIMULATION_MODE: 'false'
          USE_ALPACA: 'true'
          CONFIRM_REAL_TRADING: 'true'
          # Alpaca API credentials (only used if USE_ALPACA=true)
          ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
          ALPACA_API_SECRET: ${{ secrets.ALPACA_API_SECRET }}
          ALPACA_PAPER: 'true'
        run: |
          python execute_trades.py

      - name: Commit and push results
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git remote set-url --push origin https://$PAT_TOKEN@github.com/ounols/claude-trading.git
          git add data/
          # Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÏùÑ ÎïåÎßå Ïª§Î∞ã
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ü§ñ Auto trading: $(date +'%Y-%m-%d')"
            git push
          fi

      - name: Upload trading logs and artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trading-logs-${{ github.run_number }}
          path: |
            data/agent_data/*/log/
            data/agent_data/*/position/
            trading_data.json
            trading_prompt.txt
            claude_decision.json
            market_news.json
          retention-days: 90

      - name: Clean up temporary files
        if: always()
        run: |
          rm -f trading_data.json trading_prompt.txt claude_decision.json market_news.json
